import SkillDropdownSelect from '@/components/atoms/SkillDropdownSelect'
import {
	useCreateSkillMutation,
	useUpdateSkillMutation,
} from '@/redux/services/skill.services'
import { JobTitleData, SkillData } from '@/types/option.types'
import { generateSlug } from '@/utils/text.utils'
import {
	Box,
	Button,
	Flex,
	Input,
	Modal,
	ModalBody,
	ModalCloseButton,
	ModalContent,
	ModalHeader,
	ModalOverlay,
	useToast,
} from '@chakra-ui/react'
import React, { useEffect, useState } from 'react'
import { HiPlus } from 'react-icons/hi2'

type Props = {
	isOpen: boolean
	onClose: (data?: SkillData, isUpdate?: boolean) => void
	jobTitleData?: JobTitleData | null
}

export default function AddJobTitlePopup({
	isOpen,
	onClose,
	jobTitleData,
}: Props) {
	const [name, setName] = useState(jobTitleData?.name || '')
	const [slug, setSlug] = useState(jobTitleData?.slug || '')
	const [required_skills, setRequiredSkills] = useState(
		jobTitleData?.description || '',
	)
	const [createJobTitle, { isLoading, error, data }] = useCreateSkillMutation()
	const [
		updateSkill,
		{ isLoading: updateLoading, error: updateError, data: updatedData },
	] = useUpdateSkillMutation()
	const toast = useToast()

	const handleNameChange = (e: React.ChangeEvent<HTMLInputElement>): void => {
		const newName: string = e.target.value
		setName(newName)

		const newSlug: string = generateSlug(newName)
		setSlug(newSlug)
	}

	const onSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
		e.preventDefault()

		let data = {
			name,
		}
		if (!name || !slug) {
			return toast({ status: 'info', title: name + ' Created' })
		}

		createJobTitle(data)
		setName('')
		setSlug('')
	}

	const handleUpdate = async (e: React.FormEvent<HTMLFormElement>) => {
		e.preventDefault()

		let data = {
			name,
		}

		if (!name || !slug) {
			return toast({ status: 'info', title: name + ' Created' })
		}

		updateSkill({ data, id: jobTitleData?._id })
	}

	useEffect(() => {
		if (error) {
			//@ts-ignore
			toast({
				status: 'error',
				//@ts-ignore
				title: error?.data?.message || 'Error, please try again.',
			})
		}
		if (data) {
			onClose(data)
			toast({ status: 'success', title: 'Skill created' })
			return
		}
		if (updatedData) {
			onClose(updatedData, true)
			toast({ status: 'success', title: 'Skill updated' })
			return
		}
		if (updateError) {
			//@ts-ignore
			toast({
				status: 'error',
				//@ts-ignore
				title: updateError?.data?.message || 'Error, please try again.',
			})
		}
	}, [error, data, updateError, updatedData])

	return (
		<Modal isOpen={isOpen} onClose={onClose} size={'lg'}>
			<ModalOverlay />
			<ModalContent>
				<ModalHeader>
					{jobTitleData ? `Edit Job Title` : `Create Job Title`}
				</ModalHeader>
				<ModalCloseButton />
				<ModalBody>
					<div className="live-preview">
						<form onSubmit={jobTitleData ? handleUpdate : onSubmit}>
							<div className="row">
								<div className="col-md-12">
									<div className="mb-3">
										<label htmlFor="skill-name" className="form-label">
											Name
										</label>
										<input
											required
											type="text"
											className="form-control"
											placeholder="Full stack developer, Social media manager"
											id="skill-name"
											value={name}
											onChange={handleNameChange}
										/>
									</div>
								</div>
								<div className="col-md-12">
									<div className="mb-3">
										<label htmlFor="slug" className="form-label">
											Slug{' '}
											<small className="text-muted fw-light">
												Autogenerate
											</small>
										</label>
										<input
											required
											type="text"
											className="form-control"
											placeholder="Autogenerated Slug"
											id="slug"
											disabled
											value={slug}
										/>
									</div>
								</div>
								<div className="col-md-12">
									<div className="mb-3">
										<label htmlFor="slug" className="form-label">
											Required Skills
										</label>
										<SkillDropdownSelect />
									</div>
								</div>
							</div>
							<hr className="text-muted" />
							<Button
								colorScheme="green"
								width="full"
								type="submit"
								mb="3"
								isLoading={isLoading || updateLoading}
							>
								Create
							</Button>
						</form>
					</div>
				</ModalBody>
			</ModalContent>
		</Modal>
	)
}
